package main

import (
	"fmt"
	"sync"
)

func main() {
	// Заводим массив чисел
	arr := [5]int{2, 4, 6, 8, 10}

	// Заводим необходимые каналы для работы с числами из массива
	c := arrToChan(arr[:])
	out := sq(c)

	// Читаем все полученные значение(квадраты) и выведет результаты в stdout
	for v := range out {
		fmt.Println(v)
	}

}

/*
L1.2
Конкурентное возведение в квадрат
Написать программу, которая конкурентно рассчитает значения квадратов чисел,
взятых из массива [2,4,6,8,10], и выведет результаты в stdout.
Подсказка: запусти несколько горутин, каждая из которых возводит число в квадрат.
*/

/*
	arrToChan функция конвертирует срез чисел в канал,

который можно читать по одному значению,
параллельно обрабатывая его в других горутинах
*/
func arrToChan(nums []int) <-chan int {
	//Заводим канал типа int, куда будут отправляться числа
	out := make(chan int)
	// Запускаем анонимную горутину
	go func() {
		// Проходимся по каждому числу из nums и отправляем его(n) в канал out
		for _, n := range nums {
			out <- n
		}
		// Закрываем канал после того как все числа отправлены
		close(out)
	}()
	// Возвращаем канал
	return out
}

/*
	sq функция конкурентно возводит в квадрат все числа из входного канала,

собирает результаты в канал out и закрывает его после окончания всех вычислений
*/
func sq(in <-chan int) <-chan int {
	// Создаём WaitGroup, чтобы отслеживать завершение всех горутин
	var wg sync.WaitGroup
	// Заводим канал out с буфером на 5 элементов
	//Буфер позволяет горутинам не блокироваться сразу на записи,
	//если канал ещё не читается
	out := make(chan int, 5)
	// Читаем каждое число n из канала in
	for n := range in {
		//Перед запуском каждой горутины увеличиваем счётчик WaitGroup на 1
		wg.Add(1)
		//Запускаем горутину в которой вычисляем квадрат числа n и отправляем его в канал out
		go func(n int) { //n передаётся как аргумент, чтобы замыкание не использовало одну и ту же переменную из цикла
			out <- n * n
			// сигнализируем, что эта горутина завершила работу
			wg.Done()
		}(n)
	}
	//Ждём, пока все горутины завершатся.
	wg.Wait()
	// После завершения всех горутин закрываем канал out, иначе цикл for v := range out в main() не завершится
	close(out)
	// Возвращаем канал, из которого можно читать все квадраты чисел
	return out
}
